plugins {
  id 'com.enonic.xp.app' version '3.4.0'
  id 'com.github.node-gradle.node' version '7.0.2'
}

app {
  name = "${appName}"
  displayName = "${appDisplayName}"
  vendorName = "${vendorName}"
  vendorUrl = "${vendorUrl}"
  systemVersion = "${xpVersion}"
}

dependencies {
  implementation "com.enonic.xp:core-api:${xpVersion}"
  implementation "com.enonic.xp:portal-api:${xpVersion}"

  // ─────────────────────────────────────────────────────────────────────────
  // https://repo.enonic.com/service/rest/repository/browse/public/com/enonic/xp/
  // ─────────────────────────────────────────────────────────────────────────
  // include "com.enonic.xp:lib-admin:${xpVersion}"
  // include "com.enonic.xp:lib-app:${xpVersion}"
  // include "com.enonic.xp:lib-auditlog:${xpVersion}"
  // include "com.enonic.xp:lib-auth:${xpVersion}"
  // include "com.enonic.xp:lib-cluster:${xpVersion}"
  // include "com.enonic.xp:lib-common:${xpVersion}"
  // include "com.enonic.xp:lib-content:${xpVersion}"
  // include "com.enonic.xp:lib-context:${xpVersion}"
  // include "com.enonic.xp:lib-event:${xpVersion}"
  // include "com.enonic.xp:lib-export:${xpVersion}"
  // include "com.enonic.xp:lib-grid:${xpVersion}"
  // include "com.enonic.xp:lib-i18n:${xpVersion}"
  // include "com.enonic.xp:lib-io:${xpVersion}"
  // include "com.enonic.xp:lib-mail:${xpVersion}"
  // include "com.enonic.xp:lib-node:${xpVersion}"
  // include "com.enonic.xp:lib-portal:${xpVersion}"
  // include "com.enonic.xp:lib-project:${xpVersion}"
  // include "com.enonic.xp:lib-repo:${xpVersion}"
  // include "com.enonic.xp:lib-scheduler:${xpVersion}"
  // include "com.enonic.xp:lib-schema:${xpVersion}"
  // include "com.enonic.xp:lib-task:${xpVersion}"
  // include "com.enonic.xp:lib-value:${xpVersion}"
  // include "com.enonic.xp:lib-vhost:${xpVersion}"
  // include "com.enonic.xp:lib-websocket:${xpVersion}"

  // ─────────────────────────────────────────────────────────────────────────
  // Libraries from the Enonic Market ( https://market.enonic.com/libraries )
  // ─────────────────────────────────────────────────────────────────────────
  // https://repo.enonic.com/service/rest/repository/browse/public/com/enonic/lib/

  // https://market.enonic.com/vendors/enonic/cache-lib
  // include 'com.enonic.lib:lib-cache:2.2.0'

  // https://market.enonic.com/vendors/enonic/http-client-lib
  // include 'com.enonic.lib:lib-http-client:3.2.2'

  // https://market.enonic.com/vendors/enonic/mustache-lib
  // include 'com.enonic.lib:lib-mustache:2.1.1'

  // https://market.enonic.com/vendors/enonic/router-lib
  // include 'com.enonic.lib:lib-router:3.1.0'

  // https://market.enonic.com/vendors/enonic/static-asset-lib
  // include 'com.enonic.lib:lib-static:1.0.3'

  // https://market.enonic.com/vendors/enonic/text-encoding
  // include 'com.enonic.lib:lib-text-encoding:2.1.1'

  // https://market.enonic.com/vendors/enonic/thymeleaf-lib
  // include "com.enonic.lib:lib-thymeleaf:2.1.0"
}

repositories {
  mavenLocal()
  mavenCentral()
  xp.enonicRepo()
}

node {
  // Whether to download and install a specific Node.js version or not
  // If false, it will use the globally installed Node.js
  // If true, it will download node using above parameters
  // Note that npm is bundled with Node.js
  download = true

  // Version of node to download and install (only used if download is true)
  // It will be unpacked in the workDir
  version = '20.12.2'
}

processResources {
	exclude '**/.gitkeep'
  exclude '**/*.json'
	exclude '**/*.ts'
	exclude '**/*.tsx'
}

tasks.register('dev', Exec) {
  if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
    commandLine 'cmd', '/c', 'gradlew.bat', 'deploy', '-t'
  } else {
    commandLine './gradlew', 'deploy', '-t'
  }
}

tasks.register('npmBuild', NpmTask) {
  args = [
    'run',
    '--silent',
    'build'
  ]
  dependsOn npmInstall
  environment = [
    'FORCE_COLOR': 'true',
    'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
    'NODE_ENV': project.hasProperty('dev') || project.hasProperty('development') ? 'development' : 'production'
  ]
  inputs.dir 'src/main/resources'
  outputs.dir 'build/resources/main'
}

jar.dependsOn npmBuild

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}

check.dependsOn npmCheck

tasks.register('npmTest', NpmTask) {
	args = [
		'run',
		'test'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
	]
  inputs.dir 'src/jest'
  outputs.dir 'coverage'
}

test.dependsOn npmTest

tasks.withType(Copy).configureEach {
  includeEmptyDirs = false
}
